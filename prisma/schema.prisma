// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String              @id @default(uuid())
  fullName   String
  userName   String              @unique
  password   String
  role       UserRole            @default(user)
  profileImg String?
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  menus      MenuPermission[]
  subMenus   SubMenuPermission[]
  sections   SectionPermission[]

  @@map("users")
}

model MenuPermission {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])
  label  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("menuPermissions")
}

model SubMenuPermission {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])
  label  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subMenuPermissions")
}

model SectionPermission {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])
  label  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sectionPermissions")
}

model AccountHead {
  id       String  @id @default(uuid())
  label    String  @unique
  isIncome Boolean @default(false)

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  incomeHeads  IncomeHead[]
  expenseHeads ExpenseHead[]

  @@map("accountHeads")
}

model IncomeHead {
  id String @id @default(uuid())

  accountHeadId String
  accountHead   AccountHead @relation(fields: [accountHeadId], references: [id])

  label String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  incomes   Income[]

  @@map("incomeHeads")
}

model ExpenseHead {
  id String @id @default(uuid())

  accountHeadId String
  accountHead   AccountHead @relation(fields: [accountHeadId], references: [id])

  label String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expenses  Expense[]

  @@map("expenseHeads")
}

model Brand {
  id    String @id @default(uuid())
  label String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("brands")
}

model VehicleModel {
  id    String @id @default(uuid())
  label String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("models")
}

model Driver {
  id       String  @id @default(uuid())
  driverId String  @unique
  name     String
  mobile   String
  address  String
  isActive Boolean @default(true)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  vehicles  Vehicle[]
  trips     Trip[]
  fuels     Fuel[]

  @@map("drivers")
}

model Vehicle {
  id           String  @id @default(uuid())
  vehicleId    String  @unique
  regNo        String  @unique
  brand        String
  model        String?
  vehicleValue Int?

  driverId String?
  driver   Driver? @relation(fields: [driverId], references: [id])

  isActive Boolean @default(true)

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  trips         Trip[]
  fuels         Fuel[]
  maintenances  Maintenance[]
  incomes       Income[]
  expenses      Expense[]
  equipmentUses EquipmentUse[]

  @@map("vehicles")
}

model Party {
  id       String  @id @default(uuid())
  partyId  String  @unique
  name     String
  mobile   String?
  address  String?
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  trips     Trip[]

  @@map("parties")
}

model Trip {
  id        String   @id @default(uuid())
  tripId    String   @unique
  startDate DateTime
  endDate   DateTime
  from      String
  to        String
  distance  Int?
  tripValue Int

  vehicleId String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])

  driverId String
  driver   Driver @relation(fields: [driverId], references: [id])

  partyId String
  party   Party  @relation(fields: [partyId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  incomes   Income[]
  expenses  Expense[]

  @@map("trips")
}

model Income {
  id String @id @default(uuid())

  date DateTime

  vehicleId String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])

  tripId String?
  trip   Trip?   @relation(fields: [tripId], references: [id])

  incomeHeadId String
  incomeHead   IncomeHead @relation(fields: [incomeHeadId], references: [id])

  amount  Float
  remarks String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("incomes")
}

model Expense {
  id String @id @default(uuid())

  date DateTime

  vehicleId String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])

  tripId String?
  trip   Trip?   @relation(fields: [tripId], references: [id])

  fuelId String?
  fuel   Fuel?   @relation(fields: [fuelId], references: [id])

  maintenanceId String?
  maintenance   Maintenance? @relation(fields: [maintenanceId], references: [id])

  expenseHeadId String
  expenseHead   ExpenseHead @relation(fields: [expenseHeadId], references: [id])

  unit          Float?
  amount        Float
  remarks       String?
  miscellaneous Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("expenses")
}

model FuelType {
  id    String @id @default(uuid())
  label String
  fuels Fuel[]

  @@map("fuelTypes")
}

model Fuel {
  id   String   @id @default(uuid())
  date DateTime

  vehicleId String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])

  driverId String
  driver   Driver @relation(fields: [driverId], references: [id])

  fuelTypeId String
  fuelType   FuelType @relation(fields: [fuelTypeId], references: [id])

  odoMeter Int?
  quantity Float
  amount   Float
  remarks  String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expenses  Expense[]

  @@map("fuels")
}

model Maintenance {
  id   String   @id @default(uuid())
  date DateTime

  vehicleId String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])

  odoMeter        Int?
  workshopType    Workshop
  maintenanceType MaintenanceType
  serviceCharge   Int
  remarks         String?

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  expenses      Expense[]
  equipmentUses EquipmentUse[]

  @@map("maintenances")
}

model Uom {
  id              String           @id @default(uuid())
  label           String
  equipmentTitles EquipmentTitle[]

  @@map("uom")
}

model EquipmentTitle {
  id    String @id @default(uuid())
  label String
  uomId String
  uom   Uom    @relation(fields: [uomId], references: [id])

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  equipments    Equipment[]
  equipmentUses EquipmentUse[]

  @@map("equipmentTitles")
}

model Equipment {
  id String @id @default(uuid())

  equipmentTitleId String
  equipmentTitle   EquipmentTitle @relation(fields: [equipmentTitleId], references: [id])

  quantity   Float
  unitPrice  Float
  totalPrice Float
  remarks    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("equipments")
}

model EquipmentUse {
  id   String   @id @default(uuid())
  date DateTime

  vehicleId String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])

  maintenanceId String
  maintenance   Maintenance @relation(fields: [maintenanceId], references: [id])

  equipmentTitleId String
  equipmentTitle   EquipmentTitle @relation(fields: [equipmentTitleId], references: [id])

  quantity   Float
  unitPrice  Float
  totalPrice Float
  remarks    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("equipmentUses")
}

// ENUMS
enum UserRole {
  super_admin
  admin
  user
}

enum Workshop {
  InHouse
  External
  Others
}

enum MaintenanceType {
  Scheduled
  UnScheduled
  Accidental
  Others
}
