// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String              @id @default(uuid())
  fullName   String
  userName   String              @unique
  password   String
  role       UserRole            @default(user)
  profileImg String?
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  menus      MenuPermission[]
  subMenus   SubMenuPermission[]
  sections   SectionPermission[]

  @@map("users")
}

model MenuPermission {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])
  label  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("menuPermissions")
}

model SubMenuPermission {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])
  label  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subMenuPermissions")
}

model SectionPermission {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])
  label  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sectionPermissions")
}

model Brand {
  id    String @id @default(uuid())
  label String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("brands")
}

model VehicleModel {
  id    String @id @default(uuid())
  label String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("models")
}

model Driver {
  id       String    @id @default(uuid())
  driverId String    @unique
  name     String
  mobile   String
  address  String
  isActive Boolean   @default(true)
  trips    Trip[]
  vehicles Vehicle[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("drivers")
}

model Vehicle {
  id           String  @id @default(uuid())
  vehicleId    String  @unique
  regNo        String  @unique
  brand        String
  model        String?
  vehicleValue Int?

  driverId String?
  driver   Driver? @relation(fields: [driverId], references: [id])

  isActive Boolean @default(true)
  trips    Trip[]

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  fuels      Fuel[]
  expenses   Expense[]
  paperWorks PaperWork[]

  @@map("vehicles")
}

model Party {
  id       String  @id @default(uuid())
  partyId  String  @unique
  name     String
  mobile   String
  address  String
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  trips     Trip[]

  @@map("parties")
}

model Trip {
  id        String   @id @default(uuid())
  tripId    String   @unique
  startDate DateTime
  endDate   DateTime
  from      String
  to        String
  distance  Int?
  tripValue Int
  costing   Boolean  @default(false)

  vehicleId String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])

  driverId String
  driver   Driver @relation(fields: [driverId], references: [id])

  partyId String
  party   Party  @relation(fields: [partyId], references: [id])

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  tripExpenses TripExpense[]

  @@map("trips")
}

model TripExpense {
  id String @id @default(uuid())

  tripId String
  trip   Trip   @relation(fields: [tripId], references: [id])

  expenseHeadId String
  expenseHead   ExpenseHead @relation(fields: [expenseHeadId], references: [id])

  amount Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tripExpenses")
}

model ExpenseHead {
  id       String    @id @default(uuid())
  label    String    @unique
  isActive Boolean   @default(true)
  type     CostTitle

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  tripExpenses TripExpense[]
  expenses     Expense[]

  @@map("expenseHeads")
}

model Accessory {
  id    String @id @default(uuid())
  label String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("accessories")
}

model FuelType {
  id    String @id @default(uuid())
  label String

  fuels Fuel[]

  @@map("fuelTypes")
}

model Uom {
  id    String @id @default(uuid())
  label String

  fuels Fuel[]

  @@map("uoms")
}

model Fuel {
  id         String   @id @default(uuid())
  vehicleId  String
  vehicle    Vehicle  @relation(fields: [vehicleId], references: [id])
  date       DateTime
  fuelTypeId String
  fuelType   FuelType @relation(fields: [fuelTypeId], references: [id])
  uomId      String
  uom        Uom      @relation(fields: [uomId], references: [id])
  quantity   Float
  amount     Int
  remarks    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("fuels")
}

model Expense {
  id String @id @default(uuid())

  vehicleId String?
  vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])

  expenseHeadId String
  expenseHead   ExpenseHead @relation(fields: [expenseHeadId], references: [id])

  description String
  amount      Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("expenses")
}

model PaperType {
  id    String @id @default(uuid())
  label String

  @@map("paperTypes")
}

model PaperWork {
  id        String  @id @default(uuid())
  title     String
  vehicleId String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])

  date       DateTime
  expiryDate DateTime
  notifyDate DateTime?

  amount  Int
  remarks String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("paperWorks")
}

// ENUMS
enum UserRole {
  super_admin
  admin
  user
}

enum TripStatus {
  Upcoming
  Ongoing
  Completed
}

enum CostTitle {
  general
  trip
}
